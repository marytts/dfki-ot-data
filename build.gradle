buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

group 'de.dfki.mary'
version '0.1-SNAPSHOT'

import org.yaml.snakeyaml.*

task soxi << {
    def options = new DumperOptions()
    options.defaultFlowStyle = DumperOptions.FlowStyle.BLOCK
    def yaml = new Yaml(options)
    def data = [:]
    fileTree('wav_44K').include('*.wav').each { wavFile ->
        def soxi = "soxi $wavFile".execute()
        soxi.waitFor()
        def basename = wavFile.name - '.wav'
        def info = yaml.load(soxi.text)
        data[basename] = info
    }
    file('soxi.yaml').text = yaml.dump(data)
}

task offsets(type: Exec) {
    def scriptFile = file("$rootDir/offsets.praat")
    commandLine 'praat', '--run', scriptFile
    doFirst {
        def dir1 = 'wav_44K'
        def dir2 = 'wav'
        def fileSet = fileTree(dir1).include('*.wav').collect {
            it.name
        }.intersect(fileTree(dir2).include('*.wav').collect { it.name })
        def list1File = file("$temporaryDir/wav1.lst")
        list1File.text = fileSet.collect { file("$dir1/$it") }.join('\n')
        def list2File = file("$temporaryDir/wav2.lst")
        list2File.text = fileSet.collect { file("$dir2/$it") }.join('\n')
        commandLine += [list1File, list2File]
    }
}

task yaml << {
    def options = new DumperOptions()
    options.defaultFlowStyle = DumperOptions.FlowStyle.BLOCK
    def yaml = new Yaml(options)
    def yamlFile = file("${project.name}.yaml")
    def soxi = yaml.load(file('soxi.yaml').text)
    def offsets = yaml.load(file('offsets.yaml').text)
    def end = 0.0
    def data = fileTree('wav_44K').include('*.wav').toSorted().collect { wavFile ->
        def prompt = wavFile.name - '.wav'
        def text = file("text/${prompt}.txt").text.trim()
        def start = end
        def durationString = soxi[prompt].Duration
        def samples = durationString.tokenize()[2] as BigDecimal
        def sampleRate = soxi[prompt].'Sample Rate' as BigDecimal
        def duration = samples / sampleRate
        end += duration
        def offset = offsets[prompt] as BigDecimal
        def segments = []
        def xmin = -offset
        file("lab/${prompt}.lab").eachLine { line ->
            def fields = line.split(/\s/, 3)
            if (fields.length == 3) {
                def xmax = fields[0] as float
                def dur = xmax - xmin
                segments << [lab: fields[2], dur: dur.round(6)]
                xmin = xmax
            }
        }
        [prompt: prompt, text: text, start: start, end: end, segments: segments]
    }
    yamlFile.text = yaml.dump(data)
}
